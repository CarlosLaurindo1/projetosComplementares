package modelo;

import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import visualizacao.*;
import modelo.Movimentacao;

public class Conta {

	Movimentacao movimentacao = new Movimentacao();

	private ArrayList<Movimentacao> listaDeMovimentacao = new ArrayList<Movimentacao>();
	private ArrayList<Movimentacao> infoDoTitular = new ArrayList<Movimentacao>();

	public ArrayList<Movimentacao> listaDeMovimentacao() {
		return listaDeMovimentacao;
	}

	public void setListaDeMovimentacao(ArrayList<Movimentacao> listaDeMovimentacao) {
		this.listaDeMovimentacao = listaDeMovimentacao;
	}

	public void gerarExtrato(Movimentacao movimentacao) {
		listaDeMovimentacao.add(movimentacao);
	}

	public ArrayList<Movimentacao> infoDoTitular() {
		return infoDoTitular;
	}

	public void setInfoDoTitular(ArrayList<Movimentacao> movimentacao) {
		this.infoDoTitular = movimentacao;
	}

	public void geraInfoTitular(Movimentacao movimentacao) {
		infoDoTitular.add(movimentacao);
	}

	public void relatorioInfoTitular() {
		String informacao = "";
		informacao += "Nome titular: " + Movimentacao.getTitular() + "\n";
		informacao += "Data de Nascimento: " + Movimentacao.getDataNascimento() + "\n";
		informacao += "CPF: " + Movimentacao.getCpf() + "\n";
		informacao += "Tipo de conta: " + Movimentacao.getTipoConta() + "\n ------------- \n";
		JOptionPane.showMessageDialog(null, informacao);
	}

	public void constroiInfoTitular() {
		movimentacao.setTitular(EntradaSaida.solicitarTitular());
		movimentacao.setDataNascimento(EntradaSaida.solicitarData("de Nascimento"));
		movimentacao.setCpf(EntradaSaida.solicitarCpfTitular());
		movimentacao.setTipoConta(EntradaSaida.solicitarTipoConta());
	}

	public void construirExtrato(int transacao) {
		String informacao = "";

		for (Movimentacao movimentacao : listaDeMovimentacao) {
			informacao += "Dia movimentação" + movimentacao.getData();
			informacao += "Valor transação" + movimentacao.getValor();
			if (transacao == 1) {
				informacao += "Tipo trancação: Depósito.";
			} else {
				informacao += "Tipo trancação: Saque.";
			}
		}
		JOptionPane.showMessageDialog(null, informacao);
	}

	public void construirExtratoDep(int transacao, String data, int valor, int totalTransacao) {
		String informacao = "";

		if (transacao == 1) {
			for (int i = 0; i < totalTransacao; i++) {
				Movimentacao movimentacao = listaDeMovimentacao.get(i);
				informacao += "Dia movimentação" + movimentacao.getData();
				informacao += "Valor transação" + movimentacao.getValor();

			}
		}
		JOptionPane.showMessageDialog(null, informacao);
	}

	public void atualizaSaldo(double saldoAtualizado) {

	}

	public void construirExtratoSaq(String dataMov, double valor, int tipo) {
		String informacao = "";

		if (tipo == 2) {
			for (Movimentacao movimentacao : listaDeMovimentacao) {
				informacao += "Dia movimentação" + movimentacao.getData();
				informacao += "Valor transação" + movimentacao.getValor();

			}
		}

		JOptionPane.showMessageDialog(null, informacao);
	}

	public void depositar(double saldoAtualizado) {
		JOptionPane.showMessageDialog(null, "Opção selecionada: Depósito.");
		movimentacao.setData(EntradaSaida.solicitarData("da Transação"));
		movimentacao.setValor(EntradaSaida.solicitarValorTransacao());
	}

	public void sacar() {
		double saldoAtualizado = 0;
		JOptionPane.showMessageDialog(null, "Opção selecionada: Saque.");
		movimentacao.setData(EntradaSaida.solicitarData("da Transação"));
		movimentacao.setValor(EntradaSaida.solicitarValorTransacao());
		saldoAtualizado = saldoAtualizado - valorTransacao;
		if (saldoAtualizado <= -1000) {
			saldoAtualizado = saldoAtualizado + valorTransacao;
			JOptionPane.showMessageDialog(null, "Valor limite foi ultrapassado, a operação não foi permitida."
					+ "\n limite adicional é de R$1000,00. O saldo atual é de R$ " + saldoAtualizado);
		}
	}

}
